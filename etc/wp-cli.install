# Shortcut for the WP CLI command
WPCLI="%%SYSTEM_COMMAND_WPCLI%%"

# Setup error handling if we are in bash
if [ ! -z "$BASH" ]
then
	echo "Setting up bash error handling"
	# Stop on error
	set -e
	# Stop on unitialized variables
	set -u
	# Stop on failed pipes
	set -o pipefail
else
	echo "Not in bash!  Error handling is disabled."
fi

#
# Install WordPress
#
echo "Installing WordPress"
$WPCLI \
	core install \
		--skip-email \
		--url="%%WP_URL%%"  \
		--title="%%WP_TITLE%%" \
		--admin_user="%%WP_ADMIN_USER%%" \
		--admin_password="%%WP_ADMIN_PASS%%" \
		--admin_email="%%WP_ADMIN_EMAIL%%"

#
# Add dev user
#
echo "Adding dev user"
$WPCLI user create "%%WP_DEV_USER%%" "%%WP_DEV_EMAIL%%" --user_pass="%%WP_DEV_PASS%%" --role=administrator

#
# Remove default content
#
echo "Removing default content"
$WPCLI comment delete 1 --force
$WPCLI post delete 1 --force
$WPCLI post delete 2 --force

#
# Setup friendly URLs
#
echo "Setting up friendly URLs"
$WPCLI rewrite structure "/%year%/%monthnum%/%day%/%postname%/"

# Install all plugins that are found in the Child theme directory.
# Usually, these plugins are the proprietary plugins. (WPML, etc.).
# Please note the --force option which overwrites any installed version.
echo "Installing plugins from child theme folder"
if [ -d "%%WP_CHILD_PLUGIN_FOLDER%%" ];
then
	for plugin in  %%WP_CHILD_PLUGIN_FOLDER%%/*.zip
	do
		echo "Installing $plugin"
		$WPCLI plugin install --force $plugin
	done
fi

#
# Activate all installed inactive plugins (install them with Composer)
#
echo "Activating inactive plugins"
for WP_INACTIVE_PLUGIN in $($WPCLI plugin list --status=inactive --field=name)
do
	echo "Activating $WP_INACTIVE_PLUGIN"
	$WPCLI plugin activate "$WP_INACTIVE_PLUGIN"
done

#
# Symlink the custom theme
#
# TODO: This should configurable and synchronized with wp-config.php
echo "Creating symbolic link for custom theme in WordPress themes"
cd ./webroot/wp-content/themes
if [ ! -e custom ]
then
	ln -s ../../custom-themes/custom
fi
cd -

#
# Activate custom child theme themes
#
echo "Activating custom theme"
$WPCLI theme activate custom

#
# Setting options
#
echo "Setting up options"
# WordPress is in the wp/ folder, but home should be in the root
$WPCLI option update home '%%WP_URL%%'
# Disable comments everywhere, for the Disable Comments plugin
$WPCLI option update disable_comments_options '{"disabled_post_types":["post","page","attachment"],"remove_everywhere":true,"permanent":false,"extra_post_types":false,"db_version":6}' --format=json
# Custom upload directory, uploads will be added in a separate firectory by logged in user. Files uploaded by dev user will be versioned
$WPCLI option update custom_upload_dir --format=json '{"test_ids":"-1","template":"\/%current_user%\/%year%\/%monthnum%","only_leaf_nodes":false,"only_base_nodes":false,"flatten_hierarchy":false,"all_parents":true}'
# Resize after upload settings
$WPCLI option update jr_resizeupload_width '2560'
$WPCLI option update jr_resizeupload_height '1440'
$WPCLI option update jr_resizeupload_quality '90'
$WPCLI option update jr_resizeupload_resize_yesno 'yes'
$WPCLI option update jr_resizeupload_recompress_yesno 'no'
$WPCLI option update jr_resizeupload_convertbmp_yesno 'no'
$WPCLI option update jr_resizeupload_convertpng_yesno 'no'
$WPCLI option update jr_resizeupload_convertgif_yesno 'no'
# Compress PNG for WP (Using TinyPNG API)
$WPCLI option update gd_tiny_png_key '%%TINYPNG_API_KEY%%'
# Available options for vanilla WP are - large, medium, thumbnail
$WPCLI option update gd_tiny_png_sizes_option '{"large":"on"}' --format=json

#
# Setting categories
#

# Update default category 'Uncategorised', set name & slug from 'Uncategorised' to 'General'
echo "Renaming Uncategorised category to General"
$WPCLI term update category 1 --name=General --slug=general

#
# Clean cache
#
echo "Cleaning up transients"
$WPCLI transient delete --all

echo "Flushing cache"
$WPCLI cache flush

# vi:ft=sh
